name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup test environment
      run: |
        # Create .env file from example if it doesn't exist
        if [ ! -f .env ]; then
          cp .env.example .env
          echo "Created .env from .env.example"
        fi
        
    - name: Install Task
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run CI pipeline
      id: ci
      run: |
        echo "Running CI pipeline..."
        task ci
        echo "ci_status=success" >> $GITHUB_OUTPUT
        
    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 CI Pipeline Results')
          );
          
          const ciStatus = '${{ steps.ci.outcome }}';
          const success = ciStatus === 'success';
          
          const body = `🤖 **CI Pipeline Results**
          
          ${success ? '✅' : '❌'} **Status**: ${success ? 'PASSED' : 'FAILED'}
          
          **Tests Run:**
          - Basic functionality tests
          - Example scripts validation
          - Installation verification
          
          ${success ? 
            '🎉 All tests passed! This PR is ready for review.' : 
            '💥 Some tests failed. Please check the logs and fix the issues.'
          }
          
          <details>
          <summary>📋 Task Commands Used</summary>
          
          \`\`\`bash
          task ci  # Full CI pipeline
          \`\`\`
          
          </details>`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }